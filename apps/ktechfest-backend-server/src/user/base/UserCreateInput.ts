/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { ApplicationCreateNestedManyWithoutUsersInput } from "./ApplicationCreateNestedManyWithoutUsersInput";
import {
  ValidateNested,
  IsOptional,
  IsString,
  MaxLength,
  IsEnum,
} from "class-validator";
import { Type } from "class-transformer";
import { JobCreateNestedManyWithoutUsersInput } from "./JobCreateNestedManyWithoutUsersInput";
import { RatingCreateNestedManyWithoutUsersInput } from "./RatingCreateNestedManyWithoutUsersInput";
import { StaffAgencyWhereUniqueInput } from "../../staffAgency/base/StaffAgencyWhereUniqueInput";
import { RatingWhereUniqueInput } from "../../rating/base/RatingWhereUniqueInput";
import { EnumUserRole } from "./EnumUserRole";
import { IsJSONValue } from "../../validators";
import { GraphQLJSON } from "graphql-type-json";
import { InputJsonValue } from "../../types";
import { SkillCreateNestedManyWithoutUsersInput } from "./SkillCreateNestedManyWithoutUsersInput";
import { StaffWhereUniqueInput } from "../../staff/base/StaffWhereUniqueInput";
import { WalletWhereUniqueInput } from "../../wallet/base/WalletWhereUniqueInput";

@InputType()
class UserCreateInput {
  @ApiProperty({
    required: false,
    type: () => ApplicationCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => ApplicationCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => ApplicationCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  applications?: ApplicationCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => JobCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => JobCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => JobCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  assignedJobs?: JobCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  email?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  firstName?: string | null;

  @ApiProperty({
    required: false,
    type: () => JobCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => JobCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => JobCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  jobs?: JobCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  lastName?: string | null;

  @ApiProperty({
    required: false,
    type: () => RatingCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => RatingCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => RatingCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  myRatings?: RatingCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => StaffAgencyWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => StaffAgencyWhereUniqueInput)
  @IsOptional()
  @Field(() => StaffAgencyWhereUniqueInput, {
    nullable: true,
  })
  myStaffAgency?: StaffAgencyWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  name?: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  password!: string;

  @ApiProperty({
    required: false,
    type: () => RatingWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => RatingWhereUniqueInput)
  @IsOptional()
  @Field(() => RatingWhereUniqueInput, {
    nullable: true,
  })
  ratings?: RatingWhereUniqueInput | null;

  @ApiProperty({
    required: true,
    enum: EnumUserRole,
  })
  @IsEnum(EnumUserRole)
  @Field(() => EnumUserRole)
  role!: "Individual" | "Staff" | "StaffAgency";

  @ApiProperty({
    required: true,
  })
  @IsJSONValue()
  @Field(() => GraphQLJSON)
  roles!: InputJsonValue;

  @ApiProperty({
    required: false,
    type: () => SkillCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => SkillCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => SkillCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  skills?: SkillCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => StaffWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => StaffWhereUniqueInput)
  @IsOptional()
  @Field(() => StaffWhereUniqueInput, {
    nullable: true,
  })
  staff?: StaffWhereUniqueInput | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  username!: string;

  @ApiProperty({
    required: false,
    type: () => WalletWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => WalletWhereUniqueInput)
  @IsOptional()
  @Field(() => WalletWhereUniqueInput, {
    nullable: true,
  })
  wallet?: WalletWhereUniqueInput | null;
}

export { UserCreateInput as UserCreateInput };
