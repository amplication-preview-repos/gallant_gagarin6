/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { ApplicationUpdateManyWithoutUsersInput } from "./ApplicationUpdateManyWithoutUsersInput";
import {
  ValidateNested,
  IsOptional,
  IsString,
  MaxLength,
  IsEnum,
} from "class-validator";
import { Type } from "class-transformer";
import { JobUpdateManyWithoutUsersInput } from "./JobUpdateManyWithoutUsersInput";
import { RatingUpdateManyWithoutUsersInput } from "./RatingUpdateManyWithoutUsersInput";
import { StaffAgencyWhereUniqueInput } from "../../staffAgency/base/StaffAgencyWhereUniqueInput";
import { RatingWhereUniqueInput } from "../../rating/base/RatingWhereUniqueInput";
import { EnumUserRole } from "./EnumUserRole";
import { IsJSONValue } from "../../validators";
import { GraphQLJSON } from "graphql-type-json";
import { InputJsonValue } from "../../types";
import { SkillUpdateManyWithoutUsersInput } from "./SkillUpdateManyWithoutUsersInput";
import { StaffWhereUniqueInput } from "../../staff/base/StaffWhereUniqueInput";
import { WalletWhereUniqueInput } from "../../wallet/base/WalletWhereUniqueInput";

@InputType()
class UserUpdateInput {
  @ApiProperty({
    required: false,
    type: () => ApplicationUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => ApplicationUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => ApplicationUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  applications?: ApplicationUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => JobUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => JobUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => JobUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  assignedJobs?: JobUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  email?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  firstName?: string | null;

  @ApiProperty({
    required: false,
    type: () => JobUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => JobUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => JobUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  jobs?: JobUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  lastName?: string | null;

  @ApiProperty({
    required: false,
    type: () => RatingUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => RatingUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => RatingUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  myRatings?: RatingUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => StaffAgencyWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => StaffAgencyWhereUniqueInput)
  @IsOptional()
  @Field(() => StaffAgencyWhereUniqueInput, {
    nullable: true,
  })
  myStaffAgency?: StaffAgencyWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  name?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  password?: string;

  @ApiProperty({
    required: false,
    type: () => RatingWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => RatingWhereUniqueInput)
  @IsOptional()
  @Field(() => RatingWhereUniqueInput, {
    nullable: true,
  })
  ratings?: RatingWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    enum: EnumUserRole,
  })
  @IsEnum(EnumUserRole)
  @IsOptional()
  @Field(() => EnumUserRole, {
    nullable: true,
  })
  role?: "Individual" | "Staff" | "StaffAgency";

  @ApiProperty({
    required: false,
  })
  @IsJSONValue()
  @IsOptional()
  @Field(() => GraphQLJSON, {
    nullable: true,
  })
  roles?: InputJsonValue;

  @ApiProperty({
    required: false,
    type: () => SkillUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => SkillUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => SkillUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  skills?: SkillUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => StaffWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => StaffWhereUniqueInput)
  @IsOptional()
  @Field(() => StaffWhereUniqueInput, {
    nullable: true,
  })
  staff?: StaffWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  username?: string;

  @ApiProperty({
    required: false,
    type: () => WalletWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => WalletWhereUniqueInput)
  @IsOptional()
  @Field(() => WalletWhereUniqueInput, {
    nullable: true,
  })
  wallet?: WalletWhereUniqueInput | null;
}

export { UserUpdateInput as UserUpdateInput };
