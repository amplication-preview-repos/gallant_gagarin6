/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  User as PrismaUser,
  Application as PrismaApplication,
  Job as PrismaJob,
  Rating as PrismaRating,
  Skill as PrismaSkill,
  StaffAgency as PrismaStaffAgency,
  Staff as PrismaStaff,
  Wallet as PrismaWallet,
} from "@prisma/client";

import { PasswordService } from "../../auth/password.service";
import { transformStringFieldUpdateInput } from "../../prisma.util";

export class UserServiceBase {
  constructor(
    protected readonly prisma: PrismaService,
    protected readonly passwordService: PasswordService
  ) {}

  async count(args: Omit<Prisma.UserCountArgs, "select">): Promise<number> {
    return this.prisma.user.count(args);
  }

  async users(args: Prisma.UserFindManyArgs): Promise<PrismaUser[]> {
    return this.prisma.user.findMany(args);
  }
  async user(args: Prisma.UserFindUniqueArgs): Promise<PrismaUser | null> {
    return this.prisma.user.findUnique(args);
  }
  async createUser(args: Prisma.UserCreateArgs): Promise<PrismaUser> {
    return this.prisma.user.create({
      ...args,

      data: {
        ...args.data,
        password: await this.passwordService.hash(args.data.password),
      },
    });
  }
  async updateUser(args: Prisma.UserUpdateArgs): Promise<PrismaUser> {
    return this.prisma.user.update({
      ...args,

      data: {
        ...args.data,

        password:
          args.data.password &&
          (await transformStringFieldUpdateInput(
            args.data.password,
            (password) => this.passwordService.hash(password)
          )),
      },
    });
  }
  async deleteUser(args: Prisma.UserDeleteArgs): Promise<PrismaUser> {
    return this.prisma.user.delete(args);
  }

  async findApplications(
    parentId: string,
    args: Prisma.ApplicationFindManyArgs
  ): Promise<PrismaApplication[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .applications(args);
  }

  async findAssignedJobs(
    parentId: string,
    args: Prisma.JobFindManyArgs
  ): Promise<PrismaJob[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .assignedJobs(args);
  }

  async findJobs(
    parentId: string,
    args: Prisma.JobFindManyArgs
  ): Promise<PrismaJob[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .jobs(args);
  }

  async findMyRatings(
    parentId: string,
    args: Prisma.RatingFindManyArgs
  ): Promise<PrismaRating[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .myRatings(args);
  }

  async findSkills(
    parentId: string,
    args: Prisma.SkillFindManyArgs
  ): Promise<PrismaSkill[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .skills(args);
  }

  async getMyStaffAgency(parentId: string): Promise<PrismaStaffAgency | null> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .myStaffAgency();
  }

  async getRatings(parentId: string): Promise<PrismaRating | null> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .ratings();
  }

  async getStaff(parentId: string): Promise<PrismaStaff | null> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .staff();
  }

  async getWallet(parentId: string): Promise<PrismaWallet | null> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .wallet();
  }
}
