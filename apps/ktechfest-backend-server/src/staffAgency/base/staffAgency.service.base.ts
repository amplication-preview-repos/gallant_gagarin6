/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  StaffAgency as PrismaStaffAgency,
  Application as PrismaApplication,
  Staff as PrismaStaff,
  Payroll as PrismaPayroll,
  Job as PrismaJob,
  User as PrismaUser,
} from "@prisma/client";

export class StaffAgencyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.StaffAgencyCountArgs, "select">
  ): Promise<number> {
    return this.prisma.staffAgency.count(args);
  }

  async staffAgencies(
    args: Prisma.StaffAgencyFindManyArgs
  ): Promise<PrismaStaffAgency[]> {
    return this.prisma.staffAgency.findMany(args);
  }
  async staffAgency(
    args: Prisma.StaffAgencyFindUniqueArgs
  ): Promise<PrismaStaffAgency | null> {
    return this.prisma.staffAgency.findUnique(args);
  }
  async createStaffAgency(
    args: Prisma.StaffAgencyCreateArgs
  ): Promise<PrismaStaffAgency> {
    return this.prisma.staffAgency.create(args);
  }
  async updateStaffAgency(
    args: Prisma.StaffAgencyUpdateArgs
  ): Promise<PrismaStaffAgency> {
    return this.prisma.staffAgency.update(args);
  }
  async deleteStaffAgency(
    args: Prisma.StaffAgencyDeleteArgs
  ): Promise<PrismaStaffAgency> {
    return this.prisma.staffAgency.delete(args);
  }

  async findApplications(
    parentId: string,
    args: Prisma.ApplicationFindManyArgs
  ): Promise<PrismaApplication[]> {
    return this.prisma.staffAgency
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .applications(args);
  }

  async findEmployedStaff(
    parentId: string,
    args: Prisma.StaffFindManyArgs
  ): Promise<PrismaStaff[]> {
    return this.prisma.staffAgency
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .employedStaff(args);
  }

  async findPayrolls(
    parentId: string,
    args: Prisma.PayrollFindManyArgs
  ): Promise<PrismaPayroll[]> {
    return this.prisma.staffAgency
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .payrolls(args);
  }

  async getJobs(parentId: string): Promise<PrismaJob | null> {
    return this.prisma.staffAgency
      .findUnique({
        where: { id: parentId },
      })
      .jobs();
  }

  async getOwner(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.staffAgency
      .findUnique({
        where: { id: parentId },
      })
      .owner();
  }
}
