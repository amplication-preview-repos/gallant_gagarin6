/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StaffAgencyService } from "../staffAgency.service";
import { StaffAgencyCreateInput } from "./StaffAgencyCreateInput";
import { StaffAgency } from "./StaffAgency";
import { StaffAgencyFindManyArgs } from "./StaffAgencyFindManyArgs";
import { StaffAgencyWhereUniqueInput } from "./StaffAgencyWhereUniqueInput";
import { StaffAgencyUpdateInput } from "./StaffAgencyUpdateInput";
import { ApplicationFindManyArgs } from "../../application/base/ApplicationFindManyArgs";
import { Application } from "../../application/base/Application";
import { ApplicationWhereUniqueInput } from "../../application/base/ApplicationWhereUniqueInput";
import { StaffFindManyArgs } from "../../staff/base/StaffFindManyArgs";
import { Staff } from "../../staff/base/Staff";
import { StaffWhereUniqueInput } from "../../staff/base/StaffWhereUniqueInput";
import { PayrollFindManyArgs } from "../../payroll/base/PayrollFindManyArgs";
import { Payroll } from "../../payroll/base/Payroll";
import { PayrollWhereUniqueInput } from "../../payroll/base/PayrollWhereUniqueInput";

export class StaffAgencyControllerBase {
  constructor(protected readonly service: StaffAgencyService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: StaffAgency })
  @swagger.ApiBody({
    type: StaffAgencyCreateInput,
  })
  async createStaffAgency(
    @common.Body() data: StaffAgencyCreateInput
  ): Promise<StaffAgency> {
    return await this.service.createStaffAgency({
      data: {
        ...data,

        jobs: data.jobs
          ? {
              connect: data.jobs,
            }
          : undefined,

        owner: {
          connect: data.owner,
        },
      },
      select: {
        agencyDetails: true,
        agencyName: true,
        createdAt: true,
        id: true,

        jobs: {
          select: {
            id: true,
          },
        },

        owner: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [StaffAgency] })
  @ApiNestedQuery(StaffAgencyFindManyArgs)
  async staffAgencies(@common.Req() request: Request): Promise<StaffAgency[]> {
    const args = plainToClass(StaffAgencyFindManyArgs, request.query);
    return this.service.staffAgencies({
      ...args,
      select: {
        agencyDetails: true,
        agencyName: true,
        createdAt: true,
        id: true,

        jobs: {
          select: {
            id: true,
          },
        },

        owner: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: StaffAgency })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async staffAgency(
    @common.Param() params: StaffAgencyWhereUniqueInput
  ): Promise<StaffAgency | null> {
    const result = await this.service.staffAgency({
      where: params,
      select: {
        agencyDetails: true,
        agencyName: true,
        createdAt: true,
        id: true,

        jobs: {
          select: {
            id: true,
          },
        },

        owner: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: StaffAgency })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: StaffAgencyUpdateInput,
  })
  async updateStaffAgency(
    @common.Param() params: StaffAgencyWhereUniqueInput,
    @common.Body() data: StaffAgencyUpdateInput
  ): Promise<StaffAgency | null> {
    try {
      return await this.service.updateStaffAgency({
        where: params,
        data: {
          ...data,

          jobs: data.jobs
            ? {
                connect: data.jobs,
              }
            : undefined,

          owner: {
            connect: data.owner,
          },
        },
        select: {
          agencyDetails: true,
          agencyName: true,
          createdAt: true,
          id: true,

          jobs: {
            select: {
              id: true,
            },
          },

          owner: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: StaffAgency })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStaffAgency(
    @common.Param() params: StaffAgencyWhereUniqueInput
  ): Promise<StaffAgency | null> {
    try {
      return await this.service.deleteStaffAgency({
        where: params,
        select: {
          agencyDetails: true,
          agencyName: true,
          createdAt: true,
          id: true,

          jobs: {
            select: {
              id: true,
            },
          },

          owner: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/applications")
  @ApiNestedQuery(ApplicationFindManyArgs)
  async findApplications(
    @common.Req() request: Request,
    @common.Param() params: StaffAgencyWhereUniqueInput
  ): Promise<Application[]> {
    const query = plainToClass(ApplicationFindManyArgs, request.query);
    const results = await this.service.findApplications(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        job: {
          select: {
            id: true,
          },
        },

        staffAgency: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/applications")
  async connectApplications(
    @common.Param() params: StaffAgencyWhereUniqueInput,
    @common.Body() body: ApplicationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applications: {
        connect: body,
      },
    };
    await this.service.updateStaffAgency({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/applications")
  async updateApplications(
    @common.Param() params: StaffAgencyWhereUniqueInput,
    @common.Body() body: ApplicationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applications: {
        set: body,
      },
    };
    await this.service.updateStaffAgency({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/applications")
  async disconnectApplications(
    @common.Param() params: StaffAgencyWhereUniqueInput,
    @common.Body() body: ApplicationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applications: {
        disconnect: body,
      },
    };
    await this.service.updateStaffAgency({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/employedStaff")
  @ApiNestedQuery(StaffFindManyArgs)
  async findEmployedStaff(
    @common.Req() request: Request,
    @common.Param() params: StaffAgencyWhereUniqueInput
  ): Promise<Staff[]> {
    const query = plainToClass(StaffFindManyArgs, request.query);
    const results = await this.service.findEmployedStaff(params.id, {
      ...query,
      select: {
        availability: true,
        createdAt: true,
        cv: true,
        email: true,
        id: true,
        name: true,

        staffAgency: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employedStaff")
  async connectEmployedStaff(
    @common.Param() params: StaffAgencyWhereUniqueInput,
    @common.Body() body: StaffWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employedStaff: {
        connect: body,
      },
    };
    await this.service.updateStaffAgency({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employedStaff")
  async updateEmployedStaff(
    @common.Param() params: StaffAgencyWhereUniqueInput,
    @common.Body() body: StaffWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employedStaff: {
        set: body,
      },
    };
    await this.service.updateStaffAgency({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employedStaff")
  async disconnectEmployedStaff(
    @common.Param() params: StaffAgencyWhereUniqueInput,
    @common.Body() body: StaffWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employedStaff: {
        disconnect: body,
      },
    };
    await this.service.updateStaffAgency({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/payrolls")
  @ApiNestedQuery(PayrollFindManyArgs)
  async findPayrolls(
    @common.Req() request: Request,
    @common.Param() params: StaffAgencyWhereUniqueInput
  ): Promise<Payroll[]> {
    const query = plainToClass(PayrollFindManyArgs, request.query);
    const results = await this.service.findPayrolls(params.id, {
      ...query,
      select: {
        agency: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        payDate: true,
        salaryAmount: true,

        staff: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/payrolls")
  async connectPayrolls(
    @common.Param() params: StaffAgencyWhereUniqueInput,
    @common.Body() body: PayrollWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payrolls: {
        connect: body,
      },
    };
    await this.service.updateStaffAgency({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/payrolls")
  async updatePayrolls(
    @common.Param() params: StaffAgencyWhereUniqueInput,
    @common.Body() body: PayrollWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payrolls: {
        set: body,
      },
    };
    await this.service.updateStaffAgency({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/payrolls")
  async disconnectPayrolls(
    @common.Param() params: StaffAgencyWhereUniqueInput,
    @common.Body() body: PayrollWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payrolls: {
        disconnect: body,
      },
    };
    await this.service.updateStaffAgency({
      where: params,
      data,
      select: { id: true },
    });
  }
}
